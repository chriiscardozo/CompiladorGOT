%{
	
#include <string>
#include <iostream>
using namespace std;

void yyerror(const char*);
int yylex();
int yyparse();

%}

%token TK_INICIO TK_INCLUDE TK_BIB_INCLUDE TK_PROTOTIPO TK_COMENTARIO
%token TK_ID TK_CTE_INT TK_CTE_DOUBLE TK_CTE_FLOAT TK_CTE_CHAR TK_CTE_STRING TK_CTE_BOOL_TRUE TK_CTE_BOOL_FALSE
%token TK_INT TK_DOUBLE TK_FLOAT TK_STRING TK_CHAR TK_BOOL TK_VOID
%token TK_DECLARAR_VAR TK_AS
%token TK_MAIN TK_COMECA_BLOCO TK_TERMINA_BLOCO TK_TERMINA_MAIN TK_COMECA_FUNCAO TK_TERMINA_FUNCAO
%token TK_ADICAO TK_SUBTRACAO TK_MULTIPLICACAO TK_DIVISAO TK_MODULO
%token TK_COMP_MENOR TK_COMP_MAIOR TK_COMP_MENOR_IGUAL TK_COMP_MAIOR_IGUAL TK_COMP_IGUAL TK_COMP_DIFF
%token TK_OR TK_AND TK_NOT
%token TK_ATRIBUICAO

%right TK_ATRIBUICAO
%left TK_AND TK_OR
%nonassoc TK_COMP_IGUAL TK_COMP_DIFF
%nonassoc TK_COMP_MENOR TK_COMP_MAIOR TK_COMP_MENOR_IGUAL TK_COMP_MAIOR_IGUAL
%left TK_ADICAO TK_SUBTRACAO
%left TK_MULTIPLICACAO TK_DIVISAO TK_MODULO
%right TK_NOT

%%

S : TK_INICIO INCLUDES PROT VARS_GLOBAIS FUNCOES MAIN FUNCOES	{ cout << "*****Welcome to the Game Of Thrones*****\n\n"; }
  ;

COMENTARIO : TK_COMENTARIO COMENTARIO
		   |
		   ;

MAIN : TK_MAIN BLOCO TK_TERMINA_MAIN
	 | TK_MAIN TK_COMECA_BLOCO BLOCO TK_TERMINA_BLOCO
	 ;

FUNCOES : FUNCAO FUNCOES
		|
		;

FUNCAO : TIPO TK_ID '(' LISTA_ARGUMENTOS ')' TK_COMECA_BLOCO BLOCO TK_TERMINA_BLOCO
	   | TIPO TK_ID '(' LISTA_ARGUMENTOS ')' TK_COMECA_FUNCAO BLOCO TK_TERMINA_FUNCAO
	   ;

INCLUDES : TK_INCLUDE TK_BIB_INCLUDE INCLUDES {}
		 | {}
		 ;

PROT : TK_PROTOTIPO TIPO TK_ID '(' LISTA_ARGUMENTOS ')' ';' PROT {}
	 | {}
	 ;

TIPO : TK_INT
	 | TK_DOUBLE
	 | TK_FLOAT
	 | TK_STRING
	 | TK_CHAR
	 | TK_BOOL
	 | TK_VOID
	 ;

LISTA_ARGUMENTOS : ARGUMENTOS
				 |
				 ;

ARGUMENTOS : TIPO TK_ID ',' ARGUMENTOS
		   | TIPO TK_ID
		   ;

VARS_GLOBAIS : VAR_GLOBAL ';' VARS_GLOBAIS
			 |
			 ;

VAR_GLOBAL : TK_DECLARAR_VAR LISTA_IDS TK_AS TIPO
		   ;

LISTA_IDS : TK_ID ',' LISTA_IDS
		  | TK_ID;


BLOCO : COMENTARIO VARS_LOCAIS COMANDOS
	  ;

VARS_LOCAIS : VAR_LOCAL ';' COMENTARIO VARS_LOCAIS
			|
			;

VAR_LOCAL : TK_DECLARAR_VAR LISTA_IDS TK_AS TIPO
		  ;

COMANDOS : COMANDO COMENTARIO COMANDOS
		 |
		 ;

COMANDO : EXPRESSAO ';'
		| COMANDO_IF
		;

CHAMADA_FUNCAO : TK_ID '(' LISTA_PARAMETROS ')'
			   ;

LISTA_PARAMETROS : PARAMETROS
				 |
				 ;

PARAMETROS : EXPRESSAO ',' PARAMETROS
		   | EXPRESSAO
		   ;

EXPRESSAO : EXPRESSAO TK_ADICAO EXPRESSAO
		  | EXPRESSAO TK_SUBTRACAO EXPRESSAO
		  | EXPRESSAO TK_MULTIPLICACAO EXPRESSAO
		  | EXPRESSAO TK_DIVISAO EXPRESSAO
		  | EXPRESSAO TK_MODULO EXPRESSAO
		  | EXPRESSAO TK_COMP_MENOR EXPRESSAO
		  | EXPRESSAO TK_COMP_MAIOR EXPRESSAO
		  | EXPRESSAO TK_COMP_MENOR_IGUAL EXPRESSAO
		  | EXPRESSAO TK_COMP_MAIOR_IGUAL EXPRESSAO
		  | EXPRESSAO TK_COMP_IGUAL EXPRESSAO
		  | EXPRESSAO TK_COMP_DIFF EXPRESSAO
		  | EXPRESSAO TK_OR EXPRESSAO
		  | EXPRESSAO TK_AND EXPRESSAO
		  | TK_NOT EXPRESSAO
		  | TK_ID TK_ATRIBUICAO EXPRESSAO
		  | CHAMADA_FUNCAO
		  | TERMINAL
		  ;

TERMINAL : TK_ID
		 | TK_CTE_INT
		 | TK_CTE_DOUBLE
		 | TK_CTE_FLOAT
		 | TK_CTE_CHAR
		 | TK_CTE_STRING
		 | TK_CTE_BOOL_TRUE
		 | TK_CTE_BOOL_FALSE
		 | '(' EXPRESSAO ')';
		 ;

%%

#include "lex.yy.c"

void yyerror( const char* st ){
  puts( st );
  cout << "Perto de " << yytext;
  //printf( "Linha: %d\nPerto de: '%s'\n", nlinha, yytext );
}

int main( int argc, char* argv[] ){
//  inicializaResultadoOperador();
  yyparse();
}