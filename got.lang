<?xml version="1.0" encoding="UTF-8"?>

<language id="got" _name="GoT" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/x-got;text/x-gotsrc;</property>
    <property name="globs">*.got</property>
    <property name="line-comment-start">#HODOR</property>
    <!-- Implementar?
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
    -->
  </metadata>

  <styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="preprocessor"      _name="Preprocessor"          map-to="def:preprocessor"/>
    <style id="common-defines"    _name="Common Defines"        map-to="def:special-constant"/>
    <style id="included-file"     _name="Included File"         map-to="def:string"/>
    <style id="char"              _name="Character"             map-to="def:character"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="operator"          _name="Operator"              map-to="def:operator"/>
    <style id="type"              _name="Data Type"             map-to="def:type"/>
    <style id="storage-class"     _name="Storage Class"         map-to="def:type"/>
    <style id="printf"            _name="printf Conversion"     map-to="def:special-char"/>
    <style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>
    <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
    <style id="octal"             _name="Octal number"          map-to="def:base-n-integer"/>
    <style id="hexadecimal"       _name="Hexadecimal number"    map-to="def:base-n-integer"/>
    <style id="boolean"           _name="Boolean value"         map-to="def:boolean"/>
    <style id="standard-stream"   _name="Standard stream"       map-to="def:constant"/>
    <style id="signal-name"       _name="Signal name"           map-to="def:constant"/>
    <style id="error"             _name="Error"                 map-to="def:error"/>
  </styles>
  <default-regex-options case-sensitive="false"/>

  <definitions>

    <!--regexs-->
    <define-regex id="preproc-start">^\s*#\s*</define-regex>
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>

    <!--contexts NOT used on the main context-->
    <!-- TODO: what about scanf ? -->
    <!-- man 3 printf -->
    <context id="printf" style-ref="printf" extend-parent="false">
      <match extended="true">
        \%\%|\%
        (?:[1-9][0-9]*\$)?      # argument
        [#0\-\ \+\'I]*          # flags
        (?:[1-9][0-9]*|\*)?     # width
        (?:\.\-?(?:[0-9]+|\*))? # precision
        (?:hh|ll|[hlLqjzt])?    # length modifier
        [diouxXeEfFgGaAcsCSpnm] # conversion specifier
      </match>
    </context>

    <!--contexts used on the main context-->
    <!-- Preprocessor -->
    <context id="if0-comment" style-ref="comment">
      <start>\%{preproc-start}what_do_we_say_to_death\b\s*0\b</start>
      <end>\%{preproc-start}(endif|not_today|elif)\b</end>
      <include>
        <context id="if-in-if0">
          <start>\%{preproc-start}what_do_we_say_to_death(n?def)?\b</start>
          <end>\%{preproc-start}endwhat_do_we_say_to_death\b</end>
          <include>
            <context ref="if-in-if0"/>
            <context ref="def:in-comment"/>
          </include>
        </context>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="include" style-ref="preprocessor">
      <match extended="true">
        \%{preproc-start}
        (dracarys|import)\s*
        (".*?"|&lt;.*&gt;)
      </match>
      <include>
        <context id="included-file" sub-pattern="2" style-ref="included-file"/>
      </include>
    </context>

    <!-- Comments -->
    <context id="comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
        <start>#HODOR</start>
        <include>
          <context ref="def:in-line-comment"/>
        </include>
    </context>

     <!-- Implementar?
    <context id="comment-multiline" style-ref="comment" class="comment" class-disabled="no-spell-check">
        <start>/\*</start>
        <end>\*/</end>
        <include>
            <context ref="def:in-comment"/>
        </include>
    </context>
    
    <context id="close-comment-outside-comment" style-ref="error">
        <match>\*/(?!\*)</match>
    </context>
    -->


    <context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
      <start extended="true">
        \%{preproc-start}
        (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
        \b
      </start>
      <include>
        <context ref="def:line-continue" ignore-style="true"/>
        <context ref="string" ignore-style="true"/>
        <context ref="comment"/>
        <!-- Implementar? <context ref="def:comment-multiline"/> -->
      </include>
    </context>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context ref="printf"/>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>

    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
         ([0-9]+[Ee][+-]?[0-9]*))
        [fFlL]?
        [n]?
        (?![\w\.])
      </match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]+[uUlL]*
        [n]?
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-hexadecimal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]*[g-zG-Z][a-zA-Z0-9]*[uUlL]*
        [n]?
        (?![\w\.])
      </match>
    </context>

    <context id="octal" style-ref="octal">
      <match extended="true">
        (?&lt;![\w\.])
        0[0-7]+[uUlL]*
        [n]?
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-octal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[0-7]*[89][0-9]*[uUlL]*
        [n]?
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        (0|[1-9][0-9]*)[uUlL]*
        [n]?
        (?![\w\.])
      </match>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>breaker_of_chains</keyword>
      <keyword>house</keyword>
      <keyword>continue</keyword> <!-- Implementar? -->
      <keyword>free_folk</keyword>
      <keyword>and_so_he_spokes</keyword>
      <keyword>not_today</keyword>
      <keyword>for_the_lord_of_winterfell</keyword>
      <keyword>goto</keyword>
      <keyword>what_do_we_say_to_death</keyword>
      <keyword>the_lannister_send_their_regards</keyword>
      <keyword>which_house_do_you_belong_in</keyword>
      <keyword>while_the_proud_lord_says</keyword>
      <keyword>its_known</keyword>
      <keyword>as</keyword>
      <keyword>first_of_his_name</keyword>
      <keyword>and_now_his_watch_is_ended</keyword>
      <keyword>winter_is_coming</keyword>
      <keyword>all_functions_must_die</keyword>
      <keyword>valar_morghulis</keyword>
      <keyword>When you play the game of thrones, you win or you die</keyword>
    </context>

    <context id="types" style-ref="type">
      <keyword>martell</keyword>
      <keyword>lannister</keyword>
      <keyword>baratheon</keyword>
      <keyword>tully</keyword>
      <keyword>stark</keyword>
      <keyword>unsullied</keyword>
      <keyword>targaryen</keyword>
    </context>

    <!-- C99 booleans -->
    <context id="boolean" style-ref="boolean">
      <keyword>fire</keyword>
      <keyword>ice</keyword>
    </context>

    <context id="common-defines" style-ref="common-defines">
      <keyword>YOU_KNOW_NOTHING</keyword>
      <keyword>MAX</keyword>
      <keyword>MIN</keyword>
      <keyword>FIRE</keyword>
      <keyword>ICE</keyword>
      <keyword>squire</keyword>
    </context>

    <!--Main context-->
    <context id="got" class="no-spell-check">
      <include>
        <context ref="gtk-doc:inline-docs-section"/>
        <context ref="comment"/>
        <!-- Implementar ? 
        <context ref="comment-multiline"/>
        <context ref="close-comment-outside-comment"/>
        -->
        <context ref="if0-comment"/>
        <context ref="include"/>
        <context ref="preprocessor"/>
        <context ref="string"/>
        <context ref="char"/>
        <context ref="float"/>
        <context ref="hexadecimal"/>
        <context ref="invalid-hexadecimal"/>
        <context ref="octal"/>
        <context ref="invalid-octal"/>
        <context ref="decimal"/>
        <context ref="keywords"/>
        <context ref="types"/>
        <context ref="boolean"/>
        <context ref="common-defines"/>
      </include>
    </context>

  </definitions>
</language>
